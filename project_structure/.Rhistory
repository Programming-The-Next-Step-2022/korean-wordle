for (i in 6) {
# if guess word letters are equal to target word letters
if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) %in%
as.data.frame(wordlist[wordlist$hangeul == target,i])) {
result[i] <- 'correct'
} else if (wordlist[wordlist$hangeul == guess,i] %in%
wordlist[wordlist$hangeul == target,]) {
result[i] <- 'close'
} else {
result[i] <- 'not here'
}
}
result
}
i <- ()
i <- ()
i <- 0
check_word('안녕','친구')
i <- 1
# extract each character (as vector)
#target_word <- strsplit(target,"")[[1]]
#guess_word <- strsplit(guess,"")[[1]]
result <- character(6)
if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) %in%
as.data.frame(wordlist[wordlist$hangeul == target,i])) {
result[i] <- 'correct'
}
result
if (wordlist[wordlist$hangeul == guess,i] %in%
wordlist[wordlist$hangeul == target,]) {
result[i] <- 'close'
}
result
if {
result[i] <- 'not here'
}
runApp('shiny/tryout')
check_word <- function(target,guess) {
# check if target and guess words have the same length
if (nchar(target) != nchar(guess)) {
stop('guess word must have 2 characters!')
}
# check if target word is in the list
if(! guess %in% wordlist$hangeul) {
stop("either wrong spelling or don't know it yet :(")
}
# extract each character (as vector)
#target_word <- strsplit(target,"")[[1]]
#guess_word <- strsplit(guess,"")[[1]]
result <- character(6)
# wordle
for (i in 6) {
# if guess word letters are equal to target word letters
if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) %in%
as.data.frame(wordlist[wordlist$hangeul == target,i])) {
result[i] <- 'correct'
} else if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) %in%
as.data.frame(wordlist[wordlist$hangeul == target,])) {
result[i] <- 'close'
} else {
result[i] <- 'nope'
}
}
return(result)
}
check_word('안녕','친구')
result
result
check_word('안녕','안녕')
result <- character(6)
result
check_word('안녕','안')
check_word('안녕','안내')
target <- '친구'
target_word <- strsplit(target,"")[[1]]
target_word
target_word <- strsplit(wordlist[wordlist$hangeul == target,c(1,2,3,4,5,6)],"")[[1]]
wordlist[wordlist$hangeul == target,1]
target_word <- strsplit(wordlist[wordlist$hangeul == target,1],"")[[1]]
target_word <- strsplit(wordlist[wordlist$hangeul == target,1])[[1]]
target_word <- strsplit(wordlist[wordlist$hangeul == target,1],0)[[1]]
target_word <- strsplit(wordlist[wordlist$hangeul == target,1],0)
target_word <- strsplit(wordlist[wordlist$hangeul == target,1],"")
check_word <- function(target,guess) {
# check if target and guess words have the same length
if (nchar(target) != nchar(guess)) {
stop('the word must have 2 characters!')
}
# check if target word is in the list
if(! guess %in% wordlist$hangeul) {
stop("incorrect spelling or unknown word")
}
result <- character(6)
# wordle
for (i in 6) {
# if guess word letters are equal to target word letters
if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) %in%
as.data.frame(wordlist[wordlist$hangeul == target,i])) {
result[i] <- 'correct'
} else if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) %in%
as.data.frame(wordlist[wordlist$hangeul == target,])) {
result[i] <- 'close'
} else {
result[i] <- 'nope'
}
}
return(result)
}
check_word('안녕','안내')
check_word('안녕','안녕')
check_word <- function(target,guess) {
# check if target and guess words have the same length
if (nchar(target) != nchar(guess)) {
stop('the word must have 2 characters!')
}
# check if target word is in the list
if(! guess %in% wordlist$hangeul) {
stop("incorrect spelling or unknown word")
}
result <- character(6)
# wordle
for (i in 6) {
# if guess word letters are equal to target word letters
if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) ==
as.data.frame(wordlist[wordlist$hangeul == target,i])) {
result[i] <- 'correct'
} else if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) %in%
as.data.frame(wordlist[wordlist$hangeul == target,])) {
result[i] <- 'close'
} else {
result[i] <- 'nope'
}
}
return(result)
}
check_word('안녕','안녕')
result
result
result
runApp('shiny/tryout')
result <- character(6)
result
i <- 1
guess <- '안녕'
target <- '친구'
if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) ==
as.data.frame(wordlist[wordlist$hangeul == target,i])) {
result[i] <- 'correct'
}
result
result[i]
else if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) %in%
as.data.frame(wordlist[wordlist$hangeul == target,])) {
result[i] <- 'close'
}
if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) %in%
as.data.frame(wordlist[wordlist$hangeul == target,])) {
result[i] <- 'close'
}
if {
result[i] <- 'nope'
}
if () {
result[i] <- 'nope'
}
else {
result[i] <- 'nope'
}
i <- 3
if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) ==
as.data.frame(wordlist[wordlist$hangeul == target,i])) {
result[i] <- 'correct'
}
result[i]
result
else if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) %in%
as.data.frame(wordlist[wordlist$hangeul == target,])) {
result[i] <- 'close'
}
if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) %in%
as.data.frame(wordlist[wordlist$hangeul == target,])) {
result[i] <- 'close'
}
result
if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) ==
as.data.frame(wordlist[wordlist$hangeul == target,i])) {
result[i] <- 'correct'
}
i <- 4
if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) %in%
as.data.frame(wordlist[wordlist$hangeul == target,])) {
result[i] <- 'close'
}
result
for (i in 6) {
print(i+1)
}
length(6)
for (i in 6) {
add <- i + 1
print(add)
}
for (i in c(1,2,3,4,5,6)) {
add <- i + 1
print(add)
}
1:6
check_word <- function(target,guess) {
# check if target and guess words have the same length
if (nchar(target) != nchar(guess)) {
stop('the word must have 2 characters!')
}
# check if target word is in the list
if(! guess %in% wordlist$hangeul) {
stop("incorrect spelling or unknown word")
}
result <- character(6)
# wordle
for (i in 1:6) {
# if guess word letters are equal to target word letters
if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) ==
as.data.frame(wordlist[wordlist$hangeul == target,i])) {
result[i] <- 'correct'
} else if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) %in%
as.data.frame(wordlist[wordlist$hangeul == target,])) {
result[i] <- 'close'
} else {
result[i] <- 'nope'
}
}
return(result)
}
check_word('안녕','안녕')
check_word('안녕','친구')
check_word <- function(target,guess) {
# check if target and guess words have the same length
if (nchar(target) != nchar(guess)) {
stop('the word must have 2 characters!')
}
# check if target word is in the list
if(! guess %in% wordlist$hangeul) {
stop("incorrect spelling or unknown word")
}
result <- character(6)
# wordle
for (i in 1:6) {
# if guess word letters are equal to target word letters
if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) %=%
as.data.frame(wordlist[wordlist$hangeul == target,i])) {
result[i] <- 'correct'
} else if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) %in%
as.data.frame(wordlist[wordlist$hangeul == target,])) {
result[i] <- 'close'
} else {
result[i] <- 'nope'
}
}
return(result)
}
check_word('안녕','친구')
check_word <- function(target,guess) {
# check if target and guess words have the same length
if (nchar(target) != nchar(guess)) {
stop('the word must have 2 characters!')
}
# check if target word is in the list
if(! guess %in% wordlist$hangeul) {
stop("incorrect spelling or unknown word")
}
result <- character(6)
# wordle
for (i in 1:6) {
# if guess word letters are equal to target word letters
if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) %in%
as.data.frame(wordlist[wordlist$hangeul == target,i])) {
result[i] <- 'correct'
} else if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) %in%
as.data.frame(wordlist[wordlist$hangeul == target,])) {
result[i] <- 'close'
} else {
result[i] <- 'nope'
}
}
return(result)
}
check_word('안녕','친구')
wordlist
check_word <- function(target,guess) {
# check if target and guess words have the same length
if (nchar(target) != nchar(guess)) {
stop('the word must have 2 characters!')
}
# check if target word is in the list
if(! guess %in% wordlist$hangeul) {
stop("incorrect spelling or unknown word")
}
result <- character(6)
# wordle
for (i in 1:6) {
# if guess word letters are equal to target word letters
if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) %in%
as.data.frame(wordlist[wordlist$hangeul == target,i])) {
result[i] <- 'correct'
} else if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) %in%
as.data.frame(wordlist[wordlist$hangeul == target,])) {
result[i] <- 'close'
} else {
result[i] <- 'nope'
}
}
return(result)
}
check_word('단근','친구')
output_word <- function(result,guess) {
answer <- ""
for (i in 1:6) {
if (result[i] == 'correct') {
answer <- paste0(answer,'[',
as.data.frame(wordlist[wordlist$hangeul == guess,i]),']')
} else if (result[i] == ' close') {
answer <- paste0(answer,'(',
as.data.frame(wordlist[wordlist$hangeul == guess,i]),')')
} else {
answer <- paste0(answer,' ',
as.data.frame(wordlist[wordlist$hangeul == guess,i]),' ')
}
}
}
output_word()
result1 <- check_word('단근','친구')
result1
output_word(result1,'친구')
output_word <- function(result,guess) {
answer <- ""
for (i in 1:6) {
if (result[i] == 'correct') {
answer <- paste0(answer,'[',
as.data.frame(wordlist[wordlist$hangeul == guess,i]),']')
} else if (result[i] == ' close') {
answer <- paste0(answer,'(',
as.data.frame(wordlist[wordlist$hangeul == guess,i]),')')
} else {
answer <- paste0(answer,' ',
as.data.frame(wordlist[wordlist$hangeul == guess,i]),' ')
}
}
answer
}
output_word(result1,'친구')
output_word <- function(result,guess) {
answer <- ""
for (i in 1:6) {
if (result[i] == 'correct') {
answer <- paste0(answer,'[',
as.data.frame(wordlist[wordlist$hangeul == guess,i]),']')
} else if (result[i] == ' close') {
answer <- paste0(answer,'(',
as.data.frame(wordlist[wordlist$hangeul == guess,i]),')')
} else {
answer <- paste0(answer,' ',
as.data.frame(wordlist[wordlist$hangeul == guess,i]),' ')
}
}
encodeString(answer)
}
output_word(result1,'친구')
runApp('shiny/tryout')
runApp('shiny/tryout')
result
target
answer
guess
runApp('shiny/tryout')
guess
target
as.data.frame(wordlist[wordlist$hangeul == guess,i])
as.data.frame(wordlist[wordlist$hangeul == guess,i])
output_word <- function(result,guess) {
answer <- ""
for (i in 1:6) {
if (result[i] == 'correct') {
answer <- paste0(answer,'[',
as.data.frame(wordlist[wordlist$hangeul == guess,i]),']')
} else if (result[i] == ' close') {
answer <- paste0(answer,'(',
as.data.frame(wordlist[wordlist$hangeul == guess,i]),')')
} else {
answer <- paste0(answer,' ',
as.data.frame(wordlist[wordlist$hangeul == guess,i]),' ')
}
}
return(answer)
}
runApp('shiny/tryout')
kordle <- function() {
# Define UI for application that draws a histogram
ui <- fluidPage(
# interface to be improved
actionButton(inputId = 'clicks', label = '아이'),
tags$h3('title', style='color:grey;'),
tags$h3('안녕', style='color:grey;'),
textInput('guess',''),
actionButton('go', 'Go'),
verbatimTextOutput('result',placeholder = T),
verbatimTextOutput('keyboard',placeholder = T)
)
# select a target word
target_word <- sample(wordlist$hangeul,1)
check_word <- function(target = target_word,guess) {
# check if target and guess words have the same length
if (nchar(target) != nchar(guess)) {
stop('the word must have 2 characters!')
}
# check if target word is in the list
if(! guess %in% wordlist$hangeul) {
stop("incorrect spelling or unknown word")
}
result <- character(6)
# wordle
for (i in 1:6) {
# if guess word letters are equal to target word letters
if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) %in%
as.data.frame(wordlist[wordlist$hangeul == target,i])) {
result[i] <- 'correct'
} else if (as.data.frame(wordlist[wordlist$hangeul == guess,i]) %in%
as.data.frame(wordlist[wordlist$hangeul == target,])) {
result[i] <- 'close'
} else {
result[i] <- 'nope'
}
}
return(result)
}
#result1 <- check_word('단근','친구')
output_word <- function(result,guess) {
answer <- ""
for (i in 1:6) {
if (result[i] == 'correct') {
answer <- paste0(answer,'[',
as.data.frame(wordlist[wordlist$hangeul == guess,i]),']')
} else if (result[i] == ' close') {
answer <- paste0(answer,'(',
as.data.frame(wordlist[wordlist$hangeul == guess,i]),')')
} else {
answer <- paste0(answer,' ',
as.data.frame(wordlist[wordlist$hangeul == guess,i]),' ')
}
}
return(answer)
}
#output_word(result1,'친구')
# Define server logic required to draw a histogram
server <- function(input, output) {
output$result <- renderText({
#paste('your guess:',input$guess)
output_word(result,input$guess)
}) %>%
bindEvent(input$go)
output$keyboard <- renderText({
letters <-  c('ㅂ ㅈ ㄷ ㄱ ㅅ ㅛ ㅕ ㅑ ㅐ ㅔ')
})
wordss <- list()
observeEvent(
input$clicks, {
wordss <- append(wordss,'아이')
print('아이')
}
)
}
# Run the application
shinyApp(ui = ui, server = server)
}
library(tools, lib.loc = "C:/Program Files/R/R-4.0.4/library")
devtools::create('kordle')
install.packages('devtools')
install.packages("devtools")
devtools::create('kordle')
library(cli)
library(cli)
devtools::create('kordle')
library(cli, lib.loc = "C:/Program Files/R/R-4.0.4/library")
devtools::create('kordle')
library(cli)
devtools::create('kordle')
library(devtools)
devtools::create('kordle')
detach("package:cli", unload = TRUE)
library(cli)
detach("package:cli", unload = TRUE)
detach("package:devtools", unload = TRUE)
devtools::create('kordle')
install.packages('cli')
install.packages("cli")
devtools::create('kordle')
library(cli)
devtools::create('kordle')
devtools::create('kordle')
devtools::document()
getwd()
devtools::document()
devtools::document()
setwd("C:/Users/Emilija/Desktop/r_dir/kordle")
devtools::document()
devtools::build()
devtools::install()
install.packages('Rtools')
devtools::install()
devtools::install()
devtools::build()
devtools::document()
devtools::build()
install.packages('Rtools')
